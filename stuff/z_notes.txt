implement:

parser for weapons types
parser for armor types



ITEMS struct
name 
arrays_menu
accessx_descriptor
rarity_val 
PRIO_PROCESS 
val_inc 
HURT_DUR type

typedef struct {
      char name[50];
  int value, dur;
  Target_Type target;
} BONUS;

typedef struct {
      char name[50];
  int value, dur;
  Target_Type target;
} EFFECT;



// TEST ITEM DOWNLOAD
for (int i = 0; i < num_items; i++) {
    ITEM it = itm_list[i];
    char *type = strdup(itm_types_lb[it.type > ITEM_Type_COUNT ? ITEM_Type_COUNT : it.type]);
    char *rar = strdup(rarity_types_lb[it.rar > RARITY_COUNT ? RARITY_COUNT : it.rar]);
    printf("%s\n%c\nprc:%d\ntyp:%s\nrar:%s\n\n", it.name, it.content, it.price, type, rar);
    free(type), free(rar);
  }
  printf("%d", num_items);
  int inp = -1;
  while (inp == -1)
    inp = getchar();


// TEST WRITE_ON_CANV
  /*
  while (1) {
    char *test = init_blank_canv(50, 25, 3, ' ');
    char *inside = init_blank_canv(25, 20, 3, '.');
    if (width > 0) { inside = set_new_width(inside, get_width(inside) - width); }
    char *ver = init_blank_canv(3, 7, 3, 'u');
    write_on_canv(ver, inside, get_width(inside) / 2, get_height(inside) / 2);

    int u = 0;
    while (inside[u]) {
      if (inside[u + 1] == '\0') inside[u] = 'o';
      if (inside[u] == '\n') inside[u - 1] = 'n';
      u++;
    }

    int canv_w = get_width(test) - 1, canv_h = get_height(test) - 1;

    np = getchar();
    if (np != -1 || is_pausing) {
      if (is_in_string(np, "wasd")) is_pausing = 1;
      while (np == -1)
        np = getchar();
      x_p += np == 'd' ? 1 : np == 'a' ? -1 : 0;
      y_p += np == 'w' ? -1 : np == 's' ? 1 : 0;
      if (np == 'q') return 0;
      if (np == 'c') is_pausing = 0;
      np = -1;
    } else
      x_p++;
    if (x_p > canv_w) {
      x_p = -get_width(inside);
      y_p++;
    }
    if (x_p < -get_width(inside) - 1) x_p = 50;
    if (y_p > canv_h) y_p = -get_height(inside);
    if (y_p < -get_height(inside)) y_p = canv_h;
    // inside = fit_in_right(test, inside, x_p, y_p);
    char *new_ver = write_on_canv(inside, test, x_p, y_p);
    system("clear");
    int i = 0;
    while (test[i])
      printf("%c", test[i++]);
    printf("\n\n");
    if (new_ver) {
      i = 0;
      while (new_ver[i]) {
        printf("%c", new_ver[i + 1] == '\n' ? 'n' : new_ver[i]);
        i++;
      }
    }

    usleep(900);
    free(test), free(inside);
  }
  return 0;
  */

  int i = 5;
  while (0) {
    i++;
    int v = getchar();
    if (v == 'q') return 0;
    char *base = strdup("|123456789|\n|abcdefghi|\n|^>.-:_=!;|\n");
    char *text = strdup(base);
    if (i > strlen(text)) i = 0;
    system("clear");
    int u = 0;
    while (text[u])
      printf("%c", text[u++]);
    free(text), text = strdup(base);
    printf("\nRIGHT: \n");
    swap_line(text, i, right);
    u = 0;
    while (text[u])
      printf("%c", text[u++]);
    free(text), text = strdup(base);

    printf("\n\nMIRROR: \n");
    mirror_txt(text, i, right);
    u = 0;
    while (text[u])
      printf("%c", text[u++]);

    free(text), text = strdup(base);
    usleep(50000);
    printf("\n\n%d\n", i);
  }








int handle_inventory_menu(char *canv, BLDING *buildings, ship *plr, SHIP *mobs, BOSS *boss, PROJ *mobprj, int ) {
  int wind_x = 6, wind_y = 3;
  int wind_width = (CANV_W - (wind_x * 2)), wind_height = CANV_H - (wind_y * 2);
  int msg_width = wind_width - 15, msg_height = 6;
  int itm_zone_xP = 5, itm_zone_yP = 5;
  int y_dist = -1, x_dist = 5, inp = -1;
  int sel = 0, page = 0, obj_sel = 0, type_sel = 0;
  int is_at_end = 0;
  ITEM *sel_itm;

  while (inp != 'q' && inp != 'i') {
    char *window = init_blank_canv(wind_width, wind_height, 1, '/');
    char *interior = init_blank_canv(wind_width - 2, wind_height - 2, 1, '#');
    write_on_canv(interior, window, 1, 1);

    char *invtry_SQ = init_blank_canv(5, 3, sel == -1 ? 1 : page == 0 ? 2 : 0, ' '), *stats_SQ = init_blank_canv(8, 3, sel == -2 ? 1 : page == 1 ? 2 : 0, ' ');
    char *quests_SQ = init_blank_canv(10, 3, sel == -3 ? 1 : page == 2 ? 2 : 0, ' ');
    write_on_canv("INV", invtry_SQ, 1, 1), write_on_canv("STATS", stats_SQ, 1, 1), write_on_canv("quests", quests_SQ, 1, 1);
    write_on_canv(invtry_SQ, window, 5, 2), write_on_canv(stats_SQ, window, 15, 2), write_on_canv(quests_SQ, window, 25, 2);
    free(invtry_SQ), free(quests_SQ), free(stats_SQ);

    if (sel >= 0) {
      char *itm_zone = init_blank_canv(wind_width - itm_zone_xP * 2, wind_height - itm_zone_yP - 3, 1, '#');
      write_on_canv(itm_zone, window, itm_zone_xP, itm_zone_yP);
    }
    char fortune[16];
    snprintf(fortune, 15,"$%d", currencies[0].amount);
    write_on_canv(fortune, window, wind_width - 10, 3);

    if (page == 0) {
      for (int i = 0; i < ITEM_Type_COUNT; i++) {
        int x_dist = 15;
        char *lbl_txt = strdup(itm_types_lb[i]);
        int size = strlen(lbl_txt);
        char *lbl_sq = init_blank_canv(x_dist - 2, 3, i == type_sel ? 1 : 0, '#');
        write_on_canv(lbl_txt, lbl_sq, ((x_dist - 2) / 2) - (size / 2), 1);
        write_on_canv(lbl_sq, window, itm_zone_xP + 2 + i * x_dist, itm_zone_yP + 1);
        free(lbl_sq), free(lbl_txt);
      }
      int filtered_count;
      ITEM **itms = filter_items_by_type(itm_ownd, type_sel, INVENTORY_BUFF_SIZE - 1, &filtered_count);
      if (sel >= filtered_count) sel = MAX(filtered_count - 1, 0);

      int show_am = 13;
      for (int i = 0; i < show_am && i + obj_sel < filtered_count; i++) {
        obj_sel = MAX(sel - show_am + 1, 0);
        ITEM *itm = itms[i + obj_sel];

        if (itm->content == '\0') {
          if (sel == i) is_at_end = 1;
          continue;
        } else {
          int is_sel = i == sel || (i == show_am - 1 && sel >= show_am - 1) ? 1 : 0;
          if (is_sel) sel_itm = itms[i + obj_sel];
          char *item_bg = init_blank_canv(msg_width, is_sel ? msg_height : msg_height - 2, is_sel ? 1 : 0, '#');
          int x = is_sel ? 6 : 3;
          int st_index = get_index(item_bg, x, 1);
          char *type_txt = strdup(itm_types_lb[itm->type]);
          char *name = strdup(itm->name);
          char *desc = strdup(itm->desc);
          Color_from_index((int)itm->rar, &name);
          set_label(item_bg, &st_index, "x", itm->am);
          set_label(item_bg, &st_index, name, '\0');
          st_index = get_index(item_bg, x, 2);
          set_label(item_bg, &st_index, type_txt, '\0');
          if (is_sel) {
            st_index = get_index(item_bg, x, 3);
            set_label(item_bg, &st_index, desc, '\0');
            st_index = get_index(item_bg, x, 4);
            set_label(item_bg, &st_index, "$", page == 0 ? itm->price : itm->price / 2);
          }
          int x_pos = itm_zone_xP + 3;
          int y_pos = 4 + itm_zone_yP + (i * (y_dist + msg_height - 2));
          if (i > sel) y_pos += 2;
          write_on_canv(item_bg, window, x_pos, y_pos);
          free(item_bg), free(type_txt), free(name), free(desc);
        }
      }
      if (itms != NULL) free(itms);
    }
    if (page == 1) {
      int num_values = 3;
      int y_pos = 10;
      for (int x = 0; x < num_values; x++) {
        int x_pos = 20;
        y_pos += 2;
        sel_itm = sel == 0 ? &ship : sel == 1 ? &weapon : sel == 2 ? &armor : &ship;
        ITEM itm = x == 0 ? ship : x == 1 ? weapon : x == 2 ? armor : ship;
        char *value = strdup(itm.name), *label = strdup(itm_types_lb[itm.type]);
        Color_from_index((int)itm.rar, &value);
        char *blok = init_blank_canv((get_width(itm.name)) + 1, 1, sel == x ? 1 : 0, '#');
        int st_index = get_index(blok, 1, 1);
        set_label(blok, &st_index, value, '\0');
        write_on_canv(label, window, x_pos, y_pos);
        write_on_canv(value, window, x_pos + 15, y_pos);
        write_on_canv(blok, window, x_pos + 14, y_pos + 1);
        free(blok), free(value), free(label);
      }

      char *wp_ic = malloc(2);
      wp_ic[0] = weapon.content, wp_ic[1] = '\0';
      Color_from_index((int)weapon.rar, &wp_ic);
      write_on_canv(&wp_ic[0], window, wind_width / 2 - 3, wind_height / 2 + 3);
      write_on_canv(plr_idle_down1, window, wind_width / 2, wind_height / 2);
    }
    if (page == 2) {
      int has_one = 0;
      for (int i = 0; i < quests_TYPE_COUNT; i++) {
        char *blok = init_blank_canv(10, 10, is_sel == i ? 2 : 0, '#');
        
      }
    }

    write_on_canv(window, canv, wind_x, wind_y);
    render_canvas(canv, NULL, 0);
    inp = -1;
    while (inp == -1)
      inp = getchar();
    if (is_in_string(inp, "wasd")) play_sound(AU_click1, 0);
    if (inp == 'q') play_sound(AU_high_pitch, 0);
    if (inp == ' ') play_sound(AU_change_sel, 0);

    sel += inp == 's' ? 1 : inp == 'w' ? sel == 0 ? -1 - page : -1 : 0;
    if (sel <= -1) {
      sel += inp == 'd' ? -1 : inp == 'a' ? 1 : 0;
      if (inp == 's') sel = 0;
    } else if (inp == 'd' || inp == 'a')
      type_sel += inp == 'd' ? 1 : inp == 'a' ? -1 : 0;
    if (is_at_end && inp == 's') { sel--, is_at_end = 0; }
    sel = MAX(sel, -3);
    type_sel = MAX(type_sel, 0), type_sel = MIN(type_sel, ITEM_Type_COUNT - 1);

    if (sel == -1) page = 0;
    if (sel == -2) page = 1;
    if (sel == -3) page = 2;

    if (inp == ' ' && sel >= 0 && sel_itm->content != '\0') {
      if (page == 0) {
        char action[6];
        page == 0 ? strcpy(action, sel_itm->type == EXPANDABLE || sel_itm->type == MAP ? "USE" : "Equip") : strcpy(action, "Equip");
        char txt[100];
        char *name = strdup(sel_itm->name);
        Color_from_index((int)sel_itm->rar, &name);
        snprintf(txt, "%s %s?", action, name);
        char *box = init_blank_canv(get_width(txt) + 4, 5, 1, '#');
        write_on_canv(txt, box, 2, 2);
        write_on_canv(box, window, wind_width / 2 - get_width(box) / 2, wind_height / 2 - get_height(box) / 2);
        write_on_canv(window, canv, wind_x, wind_y);
        render_canvas(canv, NULL, 0);
        free(box), free(name);

        int np = -1;
        while (np == -1) {
          np = getchar();

          if (np == ' ') {
            ITEM_Type tp = sel_itm->type;
            ITEM *itm = tp == Spaceship ? &ship : tp == weapon ? &weapon : tp == armor ? &weapon : sel_itm;
            itm = sel_itm;
          }
        }
      }

      if (is_in_string(inp, "wasd")) play_sound(AU_click1, 0);
      if (inp == 'q') play_sound(AU_high_pitch, 0);
      if (inp == ' ') play_sound(AU_change_sel, 0);

      if (inp == ' ') {
        if (page == 0) {
          int dupl = (Get_itm_duplicate_index(*sel_itm, itm_ownd, INVENTORY_BUFF_SIZE - 1));
          if (dupl)
            itm_ownd[dupl].am++;
          else
            Copy_Item(&itm_ownd[GLB_owned_amnt], *sel_itm);
          currencies[0].amount -= sel_itm->price;
          GLB_owned_amnt++;
          sel_itm->am--;
        }
        if (page == 1) {
          currencies[0].amount += sel_itm->price / 2;
          for (int x = 0; x < GLB_owned_amnt; x++) {
            ITEM *itm = &itm_ownd[x];
            if (itm->name == sel_itm->name) itm->am--;
          }
        }
      }
    }

    if (inp == 'q' && sel >= 0) {
      inp = '?';
      sel = -1 - page;
    }

    usleep(50000);
    if (window != NULL) free(window);
    if (interior != NULL) free(interior);
  }
  reorder_list(itm_ownd, INVENTORY_BUFF_SIZE - 1);
  reorder_list(seller->items, SHOP_BUFF_SIZE - 1);
  return 1;
}
